// First Layer: Stardust (handled by the base game, but we can add layer-specific things if needed)
// We don't define 's' for Stardust here because it's the base currency managed by mod.js

// Second Layer: Nebulas (n) - Our first prestige layer
addLayer("n", {
    name: "Nebulas", // Layer name
    symbol: "N", // Displayed on the layer button
    position: 0, // Position on the tree (0 = first row)
    startData() { return { // Initial data for this layer
        unlocked: true, // Start unlocked (or false and unlock via milestone/upgrade)
        points: new Decimal(0), // Resource for this layer: Nebula Gas
    }},
    color: "#FFC0CB", // Pinkish color for the layer button/theme
    requires: new Decimal(1000), // Stardust needed to perform the first Nebula reset
    resource: "Nebula Gas", // Name of the resource generated by this layer
    baseResource: "Stardust", // The resource consumed to gain Nebula Gas
    baseAmount() {return player.points}, // Amount of base resource (Stardust) the player has
    type: "normal", // 'normal' prestige: resets previous layers
    exponent: 0.3, // Prestige formula exponent (points^0.3) - lower = scales slower
    gainMult() { // Multiplier applied AFTER the exponent calculation
        let mult = new Decimal(1)
        if (hasUpgrade('n', 13)) mult = mult.times(upgradeEffect('n', 13)); // Example: Upgrade boosts gain
        return mult
    },
    gainExp() { // Exponent applied AFTER the exponent calculation (rarely used)
        return new Decimal(1)
    },
    row: 1, // Puts this layer on the second row in the tree view (0 is the first row)
    hotkeys: [ // Optional hotkeys
        {key: "n", description: "N: Reset for Nebula Gas", onPress(){if (canReset(this.layer)) doReset(this.layer)}},
    ],
    layerShown(){return true}, // Condition for this layer to be visible (true = always)

    // Effect of having Nebula Gas
    effect(){
        // Nebula Gas boosts Stardust gain. Example: base ^ (1 + sqrt(Nebula Gas))
        // Added 0.01 to avoid issues with log(0) or power issues if effect base is 0 or 1
        let baseEffect = player.n.points.plus(0.01).sqrt().add(1);
        // Cap the effect if needed, e.g., baseEffect.min(100)
        return baseEffect;
    },
    effectDescription(){ // Text describing the effect
        return "which are boosting Stardust generation by ^" + format(this.effect())
    },

    // Upgrades for the Nebula Layer
    upgrades: {
        11: {
            title: "Cosmic Stirring",
            description: "Multiply Stardust gain based on current Stardust.",
            cost: new Decimal(1), // Costs 1 Nebula Gas
            effect() {
                // Effect formula: log10(Stardust + 1) ^ 0.5 + 1
                // Adding 1 to player.points avoids log10(0) issues.
                // Adding 1 at the end ensures the multiplier is at least 1.
                return player.points.plus(1).log10().pow(0.5).plus(1);
            },
            effectDisplay() { return format(this.effect())+"x" }, // How the effect is shown
        },
        12: {
            title: "Nebula Condensation",
            description: "Nebula Gas boosts its own gain.",
            cost: new Decimal(5), // Costs 5 Nebula Gas
            unlocked() { return hasUpgrade('n', 11) }, // Requires previous upgrade
            effect() {
                // Effect formula: (Nebula Gas + 1) ^ 0.2
                return player[this.layer].points.add(1).pow(0.2)
            },
             effectDisplay() { return format(this.effect())+"x" }, // Display effect multiplier
             // Note: This effect needs to be applied in gainMult() or gainExp() above.
             // Let's add it to gainMult as an example (already done above).
        },
         13: {
            title: "Enhanced Coalescence",
            description: "Further boost Nebula Gas gain based on total Nebula Gas.",
            cost: new Decimal(25),
            unlocked() { return hasUpgrade('n', 12) },
            effect() {
                // Effect formula: log2(Nebula Gas + 1) + 1
                return player[this.layer].points.plus(1).log2().plus(1)
            },
            effectDisplay() { return format(this.effect())+"x" },
             // Applied in gainMult()
        },
    },

     // Milestones for the Nebula Layer
    milestones: {
        0: {
            requirementDescription: "1 Nebula Gas",
            effectDescription: "Keep Stardust upgrades on Nebula reset.", // Essential QoL
            done() { return player.n.points.gte(1) }
        },
        1: {
            requirementDescription: "5 Nebula Gas",
            effectDescription: "You passively generate 1% of your pending Nebula Gas per second.", // Auto-generation
            done() { return player.n.points.gte(5) },
            toggles: [ // Optional: Add a toggle button for this milestone effect
                ["n", "auto_prestige"] // Assumes you might add automation later
            ]
        }
    },

    // Passive generation (unlocked by milestone 1)
    passiveGeneration() {
        if (hasMilestone('n', 1)) return 0.01; // Gain 1% per second
        return 0; // Otherwise, no passive gain
    },

    // What happens when you reset this layer
    doReset(resettingLayer) {
        // If resetting this layer ('n') or a layer above it, reset Stardust stuff.
        // Keep Milestones based on the 'keep' property in the milestone definition (implicit in TMT).
        let keep = [];
        if (hasMilestone('n', 0)) {
             // Keep Stardust upgrades if milestone 0 is achieved
             // Note: The base game keeps upgrades on reset *within the same layer* automatically.
             // This milestone is primarily for keeping *previous layer* upgrades.
             // TMT's default behavior might handle this; adjust if needed.
             // If Stardust had its own layer 's', you'd add: if (layers[resettingLayer].row > this.row) layerDataReset("s", keep)
        }

         // Reset base points (Stardust) if resetting Nebulas or a higher layer
        if (layers[resettingLayer].row > 0) { // Resetting layer 'n' (row 1) or higher
             layerDataReset('points'); // This resets player.points (Stardust)
        }
    },
})
